name: Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Create test environment
      run: |
        mkdir -p data/logs
        cp .env.example .env
        
    - name: Run tests
      run: |
        pytest tests/ -v --tb=short --maxfail=5
        
    - name: Run tests with coverage
      if: matrix.python-version == '3.11'
      run: |
        pytest tests/ --cov=odin --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        
    - name: Lint with flake8
      run: |
        flake8 odin/ --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=__pycache__
      continue-on-error: true
        
    - name: Check formatting with black
      run: |
        black --check --diff odin/
      continue-on-error: true
        
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff odin/
      continue-on-error: true
        
    - name: Type checking with mypy
      run: |
        mypy odin/ --ignore-missing-imports --no-strict-optional
      continue-on-error: true

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Security check with bandit
      run: |
        bandit -r odin/ -f json -o bandit-report.json || echo "Bandit found potential issues"
        
    - name: Dependency security check with safety
      run: |
        safety check --json --output safety-report.json || echo "Safety found potential issues"
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json